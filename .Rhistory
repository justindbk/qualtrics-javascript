15/19
19/15
library(foreign)
library(tidyverse)
library(stringr); library(reshape2)
library(lfe) # fixed effects models
library(stargazer); library(xtable)
library(MASS)
reset <- 1
!is.null(reset)
nconditions <- 15
blockvalue <- "green"
all_conditions <- c(1:nconditions)
all_conditions
conditions_randomized <- sample(all_conditions,15,replace = F)
conditions_randomized
blockvalue <- "green"
counter$`blockvalue` <- 1
counter <- list()
counter$`blockvalue` <- 1
counter
counter$blockvalue
counter <- list()
counter <- list()
$blockvalue
counter[blockvalue] <- 1
counter
conditions_randomized
counter[blockvalue]
conditions_randomized[counter[blockvalue]]
as.numeric(counter[blockvalue])
conditions_randomized
conditions_randomized <- data.frame()
all_conditions
conditions_randomized[,blockvalue] <- sample(all_conditions,nconditions,replace = F)
conditions_randomized <- data.frame(1:nconditions)
conditions_randomized
conditions_randomized <- data.frame(matrics(NA,nrow=nconditions))
conditions_randomized <- data.frame(matrix(NA,nrow=nconditions))
conditions_randomized
conditions_randomized <- data.frame(rep(NA,nconditions))
conditions_randomized
conditions_randomized[,blockvalue] <- sample(all_conditions,nconditions,replace = F)
conditions_randomized
conditions_randomized[as.numeric(counter[blockvalue]),blockvalue]
as.numeric(counter[blockvalue])
blockvalue <- "blue"
counter[blockvalue]
blockvalue
counter[blockvalue] <- counter[blockvalue] + 1
!is.null(counter[blockvalue])
counter[blockvalue]
!is.null(as.numeric(counter[blockvalue]))
length(counter[blockvalue])>0
length(counter[blockvalue])
counter[blockvalue]
counter
names(counter)
grepl(names(counter),blockvalue)
counter[blockvalue] <- 1
counter
grepl(names(counter),blockvalue)
grepl(blockvalue,names(counter))
sum(grepl(blockvalue,names(counter)))>0
conditions_randomized[,blockvalue]
conditions_randomized
blockvalue
counter[blockvalue]
conditions_randomized[,blockvalue]
all_conditions <- c(1:nconditions)
conditions_randomized[,blockvalue] <- sample(all_conditions,nconditions,replace = F)
conditions_randomized
as.numeric(counter[blockvalue])
counter[blockvalue]
conditions_randomized
conditions_randomized[as.numeric(counter[blockvalue]),blockvalue]
surveyid <- "jdbk-qualtrics-test"
filename <- paste0(surveyid,".RData")
counter <- list()
conditions_randomized <- data.frame(rep(NA,nconditions))
reset = NULL
!is.null(reset)
file.exists(filename)
counter[blockvalue] <- 1
all_conditions <- c(1:nconditions)
conditions_randomized[,blockvalue] <- sample(all_conditions,nconditions,replace = F)
condition_assigned <- conditions_randomized[as.numeric(counter[blockvalue]),blockvalue]
condition_assigned
conditions_randomized
save(list = c(counter,conditions_randomized),file = filename)
save(counter,conditions_randomized,file = filename)
filename <- paste0(surveyid,".RData")
counter <- list()
conditions_randomized <- data.frame(rep(NA,nconditions))
file.exists(filename)
load(filename)
counter
conditions_randomized
sum(grepl(blockvalue,names(counter)))>0
counter[blockvalue] <- counter[blockvalue] + 1
counter[blockvalue]
counter[blockvalue] <- as.numeric(counter[blockvalue]) + 1
counter
# assign condition based on counter within that block:
condition_assigned <- conditions_randomized[as.numeric(counter[blockvalue]),blockvalue]
condition_assigned
conditions_randomized
condition_assigned
blockvalue <- "green"
filename <- paste0(surveyid,".RData")
counter <- list()
conditions_randomized <- data.frame(rep(NA,nconditions))
!is.null(reset)
file.exists(filename)
load(filename)
sum(grepl(blockvalue,names(counter)))>0
counter[blockvalue] <- 1
all_conditions <- c(1:nconditions)
conditions_randomized[,blockvalue] <- sample(all_conditions,nconditions,replace = F)
conditions_randomized
counter
# assign condition based on counter within that block:
condition_assigned <- conditions_randomized[as.numeric(counter[blockvalue]),blockvalue]
condition_assigned
save(counter,conditions_randomized,file = filename)
return(condition_assigned)
library(shiny)
surveyid = query[["surveyid"]]
query <- getQueryString(session)
session
runApp('shinyapp')
rsconnect::showLogs()
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
session$clientData$url_search
# query <- parseQueryString(session$clientData$url_search)
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
query
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
# query <- parseQueryString(session$clientData$url_search)
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
as.character(
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
)
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
renderText({
# query <- parseQueryString(session$clientData$url_search)
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
as.character(
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
)
})
output$condition_assigned <- renderText({
# query <- parseQueryString(session$clientData$url_search)
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
as.character(
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
)
})
paste(
blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
)
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
user_query <- reactive({
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
})
user_query
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
query <- parseQueryString("?surveyid=jdbk&nconditions=3&blockvalue=green")
condition <- blockrandomize(surveyid = query[["surveyid"]],
blockvalue = query[["blockvalue"]],
nconditions = query[["nconditions"]],
reset = query[["reset"]]
)
paste(query[["surveyid"]])
condition
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
paste(query[["surveyid"]])
output
output$condition_assigned <- NULL
query
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
